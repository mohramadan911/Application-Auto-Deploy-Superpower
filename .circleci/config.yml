version: 2.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WorkflowID:
        type: string   
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws --region us-east-1 cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WorkflowID >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      WorkflowID:
        type: string      
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
              cd ~/project/backend
              npm install
              npm run migrations:revert
          when: on_fail




jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end1
          command: |
            cd frontend
            npm install
            npm run build
            npm audit fix --force
            npm fund

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build1
          command: |
            cd backend
            npm install
            npm run build
            npm audit fix
            npm fund
            

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm i typescript@3.1.6 run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm install

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm install

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws --region us-east-1 cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws --region us-east-1 cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws --region us-east-1 ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
              BACKEND_IP=`cat .circleci/ansible/inventory.txt | head -2 | tail -1`
              echo "BACKEND_IP: ${BACKEND_IP}"
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - destroy-environment:
            WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"  
      
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys: 
          fingerprints: [18:ae:75:0c:8b:9e:2c:3a:c9:3a:6a:af:bc:8b:08:f7]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            
      - run:
          name: Configure server
          command: |
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - attach_workspace:
          at: ~/

      - run:
          name: Run migrations
          command: | 
              cd backend
              echo ENVIRONMENT=$production > ".env"
              echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
              echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

              npm install
              
  
              npm run migrations > migration_output.txt
              
      - restore_cache:
          keys: 
            - v1-dependencies-{{ checksum "migration_output.txt" }}
            # fallback to using the latest cache if no exact match is founds
            - v1-dependencies-

      - save_cache:
          paths: 
            - cache
          key: v1-dependencies-{{ checksum "migration_output.txt" }}

      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}" 

      - revert-migrations:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}" 

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy frontend objects
          command: |
            BACKEND_IP=`cat .circleci/ansible/inventory.txt | head -2 | tail -1`
            API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL: ${API_URL}"
            export API_URL=${API_URL}
            echo "${API_URL}" >> "frontend/.env"
            echo ENVIROMENT=production  >> "frontend/.env" 
            echo NODE_ENV=production >> "frontend/.env"
            cat "frontend/.env"
            cd frontend
            export API_URL=http://${BACKEND_IP}:3030
            echo "API_URL=$API_URL" >> .env
            echo ${API_URL} 
            npm install
            npm run build
            ls -la 
            
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            ls -la 
            aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}"/ --recursive   
      #- destroy-environment:
          #WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}" 

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: [18:ae:75:0c:8b:9e:2c:3a:c9:3a:6a:af:bc:8b:08:f7]

      - attach_workspace:
          at: ~/
          
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
            apk add --update openssh-client
      - run:
          name: Deploy backend
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            BACKEND_IP=`cat inventory.txt | head -2 | tail -1`
            echo "BACKEND_IP: ${BACKEND_IP}"
            ansible-playbook -i inventory.txt deploy-backend.yml
      #- destroy-environment:
          #WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - attach_workspace:
            at: ~/
      - run:
          name: Get the URL of Backend and smoke test.
          command: |
            BACKEND_IP=`cat .circleci/ansible/inventory.txt | head -2 | tail -1`
            echo ${BACKEND_IP}
            export URL="http://$BACKEND_IP:3030/api/status"
            echo $URL
            curl $URL
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}".s3-website-us-east-1.amazonaws.com"
            curl -s $URL | grep "Welcome"
            if curl -s $URL | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # - destroy-environment:
      #     WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations 


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
            # Install nodejs on Fedora Core based on nodesource website instructions
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            echo OldWorkflowID: "$OldWorkflowID"
            echo STACKS: "$STACKS" 
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name=udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
            --tags project=udapeople

      # Here's where you will add some code to rollback on failures
      # - destroy-environment:
      #     WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations
 
  cleanup:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            echo OldWorkflowID: "$OldWorkflowID"
            echo STACKS: "$STACKS" 
      - run:
          name: Remove old stacks and files
          command: |
            if [ ! -z $OldWorkflowID ]
            then
              echo "I'm HERE !!!"
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              echo "Stacks deleted succesfully"
            else
              echo "Fresh New Stacks"
            fi
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}" 

                    
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
              
      - configure-infrastructure:
          requires: [deploy-infrastructure]

      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]