version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WorkflowID:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws --region us-west-1 cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WorkflowID >>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end1
          command: |
            cd frontend
            npm install
            npm run build
            npm audit fix --force
            npm fund

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build1
          command: |
            cd backend
            npm install
            npm run build
            npm audit fix
            npm fund
            

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm i typescript@3.1.6 run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm install

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm install

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws --region us-west-1 cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws --region us-west-1 cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
              BACKEND_IP=`cat .circleci/ansible/inventory.txt | head -2 | tail -1`
              echo "BACKEND_IP: ${BACKEND_IP}"
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - destroy-environment:
            WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"  

            
        # Here's where you will add some code to rollback on failure
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]